<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Graphical Programming Language</name>
    </assembly>
    <members>
        <member name="T:Graphical_Programming_Language.Circle">
            <summary>
            Derived class Circle which inherits abstract class Shape to represent circle shape being drawn on graphics.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Circle.radius">
            <summary>
            Variable to store the radius of the circle.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.Circle.#ctor(System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Single,System.Int32)">
            <summary>
            Parameterized constructor Circle which initializes an instance of the class Circle with specified parameters. 
            The color, fill, x and y parameters are passed to base class Shape constructor.
            </summary>
            <param name="colour">Colour of the circle.</param>
            <param name="fill">For circle to be filled or not.</param>
            <param name="x">X coordinate from where the circle will be drawn.</param>
            <param name="y">Y coordinate from where the circle will be drawn.</param>
            <param name="rotationAngle">Angle for circle to be rotated not used but inherited from abstract class shape.</param>
            <param name="radius">Angle for circle to be rotated.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Circle.Draw(System.Drawing.Graphics)">
            <summary>
            Abstract method draw inherited from base class to be overriden in derived class Circle to draw circle on the graphics.
            </summary>
            <param name="g">Graphics object on which the circle will be drawn.</param>
        </member>
        <member name="T:Graphical_Programming_Language.CommandParser">
            <summary>
            CommandParser class to parse and execute the commands to draw in graphics.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.validCommands">
            <summary>
            Array of valid command name that can used.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.validRelationalOperators">
            <summary>
            Array of valid relational operators for if statement and while loop.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.validArithmeticOperators">
            <summary>
            Array if valid arithmetic operators for assignment of variable.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.isMultiLine">
            <summary>
            Variable to set the flag if multiline textbox is not empty. 
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.command">
            <summary>
            Array to store the current running command with its values.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.commandValues">
            <summary>
            List to store only values or parameters of the command in integer datatype.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.Shapes">
            <summary>
            List to store drawn shapes to persist the drawing in the panel.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.rotationAngle">
            <summary>
            Variable to set the rotating angle value to rotate the shape.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.variablesAndValues">
            <summary>
            Dictionary to store command variable and its value as key-value pair.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.xPos">
            <summary>
            Variable to store X coordinate from where the drawing will start.
            Initially set to 0.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.yPos">
            <summary>
            Variable to store X coordinate from where the drawing will start.
            Initially set to 0.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.commandName">
            <summary>
            Variable to only store current running command name.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.value">
            <summary>
            Variable to store the current command value of the command variable.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.oprand1">
            <summary>
            Variable to store the current value of oprand1 in operation.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.oprand2">
            <summary>
            Variable to store the current value of oprand2 in operation.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.operators">
            <summary>
            Variable to store the current operator in operation.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.equalTo">
            <summary>
            Variable to store the assignment operator "=".
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.commandStringValue">
            <summary>
            Variable to store current command value in string.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.isVariable">
            <summary>
            Variable to set the flag of the command variable being valid.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.isIfStatement">
            <summary>
            Variable to set the flag of the command if statement being valid.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.isIfTriggered">
            <summary>
            Variable to set the flag of the command if statement being triggered.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.isIfConditionTrue">
            <summary>
            Variable to set the flag of the command if statement condition being true.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.isEndIfStatement">
            <summary>
            Variable to set the flag of the command endif statement being valid.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.isWhileLoop">
            <summary>
            Variable to set the flag of the command while loop being valid.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.isWhileTriggered">
            <summary>
            Variable to set the flag of the command while loop being triggered.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.isWhileConditionTrue">
            <summary>
            Variable to set the flag of the command while condition being true.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.isEndLoop">
            <summary>
            Variable to set the flag of the command end loop being valid.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.result">
            <summary>
            Variable to store the current int conversion value. 
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.isValidCommand">
            <summary>
            Variable to set the flag of current command name being valid.
            Initially set to false.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.isValidParameters">
            <summary>
            Variable to set the flag of current command value or parameters being valid.
            Initially set to false.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.fill">
            <summary>
            Variable to set the flag of the shape being either filled or not filled.
            Initially set to false.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.color">
            <summary>
            Variable to store the current pen color used to draw.
            Initially set to black.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.isMethod">
            <summary>
            Variable to set the flag of the method command being valid.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.isMethodTriggered">
            <summary>
            Variable to set the flag of the command method being triggered.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.isEndMethod">
            <summary>
            Variable to set the flag of the endmethod command being valid.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.isMethodCalled">
            <summary>
            Variable to set the flag of the method command being called.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.methodName">
            <summary>
            Variable to store the curret method name.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser.methods">
            <summary>
            Dictionary to save valid method and its block.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.CommandParser._messageDisplayer">
            <summary>
            Instance of IMessageDisplayer interface created used to display error message.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.CommandParser.#ctor(Graphical_Programming_Language.IMessageDisplayer,Graphical_Programming_Language.Form_SPL)">
            <summary>
            Parameterized constructor which initializes a new instance of the Command_Parser class that takes
            instance of IMessageDisplayer interface as parameter to display error messages.
            </summary>
            <param name="messageDisplayer">Instance of IMessageDisplayer interface to display error messages.</param>
            <param name="form">Instance of Form_SPL class for the use of delegate to make the commands run in main form. </param>
        </member>
        <member name="P:Graphical_Programming_Language.CommandParser.Form">
            <summary>
            Getter method to return instance of the Form_SPL class.
            </summary>
        </member>
        <member name="P:Graphical_Programming_Language.CommandParser.IsMultiLine">
            <summary>
            Setter method to set the flag of multiline textbox being triggered.
            </summary>
        </member>
        <member name="P:Graphical_Programming_Language.CommandParser.Command">
            <summary>
            Getter and setter methods for the command array to get or set the current command with its values.
            </summary>
        </member>
        <member name="P:Graphical_Programming_Language.CommandParser.MethodName">
            <summary>
             Getter and setter methods to get or set the current method name.
            </summary>
        </member>
        <member name="P:Graphical_Programming_Language.CommandParser.XPos">
            <summary>
            Getter and setter methods for X-axis.
            </summary>
        </member>
        <member name="P:Graphical_Programming_Language.CommandParser.YPos">
            <summary>
            Getter and setter methods for Y-axis.
            </summary>
        </member>
        <member name="P:Graphical_Programming_Language.CommandParser.IsIfConditionTrue">
            <summary>
            Getter and setter methods to get or set the command if statement condition being true.
            </summary>
        </member>
        <member name="P:Graphical_Programming_Language.CommandParser.IsWhileConditionTrue">
            <summary>
            Getter and setter methods to get or set the command if statement condition being true.
            </summary>
        </member>
        <member name="P:Graphical_Programming_Language.CommandParser.Color">
            <summary>
            Getter and setter methods to get or set the current pen colour.
            </summary>
        </member>
        <member name="P:Graphical_Programming_Language.CommandParser.VariablesAndValues">
            <summary>
            Getter and setter methods to get or set the dicitionary that stores command variables in key value pair.
            </summary>
        </member>
        <member name="P:Graphical_Programming_Language.CommandParser.IsValidCommand">
            <summary>
            Getter method to get boolean value of a command name being valid or not.
            </summary>
        </member>
        <member name="P:Graphical_Programming_Language.CommandParser.IsValidParameters">
            <summary>
            Getter method to get boolean value of a command parameters being valid or not.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.CommandParser.GetShapes">
            <summary>
            Getter method to return list of stored drawn shapes.
            </summary>
            <returns>Return the list of drawn shapes.</returns>
        </member>
        <member name="P:Graphical_Programming_Language.CommandParser.Methods">
            <summary>
            
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.CommandParser.Is_A_Variable">
            <summary>
            Boolean method to verify if a command variable is valid and if valid to set its value.
            </summary>
            <returns>Returns true if variable or variable assignment is valid else it returns false.</returns>
        </member>
        <member name="M:Graphical_Programming_Language.CommandParser.Is_A_If_Statement">
            <summary>
            Boolean method to verify a valid command if statement.
            </summary>
            <returns>Returns true if the command if statement is valid else returns false.</returns>
        </member>
        <member name="M:Graphical_Programming_Language.CommandParser.Is_A_EndIf_Statement">
            <summary>
            Boolean method to verify command endif statement or the end of if statement. 
            </summary>
            <returns>Returns true if the if statement is ended properly else returns false.</returns>
        </member>
        <member name="M:Graphical_Programming_Language.CommandParser.Is_A_While_Loop">
            <summary>
            Boolean method to verify a valid command if statement.
            </summary>
            <returns>Returns true if the command if statement is valid else returns false.</returns>
        </member>
        <member name="M:Graphical_Programming_Language.CommandParser.Is_A_End_Loop">
            <summary>
            Boolean method to verify command endif statement or the end of if statement. 
            </summary>
            <returns>Returns true if the if statement is ended properly else returns false.</returns>
        </member>
        <member name="M:Graphical_Programming_Language.CommandParser.Is_A_Method">
            <summary>
            Boolean method to verify command method. 
            </summary>
            <returns>Returns true if the method is valid else returns false.</returns>
        </member>
        <member name="M:Graphical_Programming_Language.CommandParser.Is_A_End_Method">
            <summary>
            Boolean method to verify command endmethod. 
            </summary>
            <returns>Returns true if the method is ended properly else returns false.</returns>
        </member>
        <member name="M:Graphical_Programming_Language.CommandParser.Is_Method_Called">
            <summary>
            Boolean method to verify valid command method being called. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Graphical_Programming_Language.CommandParser.ValidateCommandName">
            <summary>
            Boolean method to verify if a command name is valid or not by passing it and checking if it is in the validCommands array.
            </summary>
            <returns>Returns true if command name is valid if not returns false.</returns>
        </member>
        <member name="M:Graphical_Programming_Language.CommandParser.ValidateParameters">
            <summary>
            Boolean method to verify if command parameters are valid or not by checking for specific values 
            and length of the command array or commandValues array.
            </summary>
            <returns>Returns true if command parameters are valid if not returns false.</returns>
        </member>
        <member name="M:Graphical_Programming_Language.CommandParser.ShapeCommands(System.Drawing.Graphics)">
            <summary>
            Method to get the type of shapes and set its propeprties according to the command name. 
            </summary>
            <returns>Returns instance of inherited class of base class Shape.</returns>
        </member>
        <member name="M:Graphical_Programming_Language.CommandParser.RunCommand(System.Drawing.Graphics,System.Int32)">
            <summary>
            Void method to run the commands after being verified by ValidateCommandName and ValidateParameters.
            Adds to Shapes list after drawing to persist the drawing.
            </summary>
            <param name="g">Graphics object taken as parameter to draw the shapes on.</param>
            <param name="penSize">Pen size to be set for drawing.</param>
        </member>
        <member name="T:Graphical_Programming_Language.DisplayMessageBox">
            <summary>
            Class that implements IMessageDisplayer to display the error message in MessageBox.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.DisplayMessageBox.DisplayMessage(System.String)">
            <summary>
            Implementing method from IMessageDisplayer interface to show the error messages in MessageBox.
            </summary>
            <param name="message">The error message to be displayed in the MessageBox.</param>
        </member>
        <member name="T:Graphical_Programming_Language.Form_SPL">
            <summary>
            Form_SPL class to represent the Graphical Programming Language UI and its features.
            </summary>
        </member>
        <member name="T:Graphical_Programming_Language.Form_SPL.UpdateDrawingDelegate">
            <summary>
            Delegate to define a method to update the drawing from child thread to main thread. 
            </summary>
            <param name="shape"></param>
        </member>
        <member name="F:Graphical_Programming_Language.Form_SPL.g">
            <summary>
            Class variable for a Graphics object on which the drawing is done.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Form_SPL.command">
            <summary>
            Instance of the CommandParser class created to pass the commands provided in textbox of the form.
            Instance of DisplayMessageBox as a argument to CommandParser constructor for creating MessageBox for error messages.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Form_SPL.penColour">
            <summary>
            Instance of ColorDialog class to create a color dialogue box and store the pen color value.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Form_SPL.canvasColour">
            <summary>
            Instance of ColorDialog class to create a color dialogue box and store the canvas color value.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Form_SPL.Shapes">
            <summary>
            List to store all the drawn shapes and persist it in the panel.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Form_SPL.multiCommands">
            <summary>
            Array to store multiple commands provided by the user.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Form_SPL.syntaxChecked">
            <summary>
            Variable to set the flag of syntax button being clicked.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Form_SPL.Form_SPL_Form2">
            <summary>
            Instance of Form_SPL or main form class for child thread.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Form_SPL.formCount">
            <summary>
            Static variable to store the number of forms created by child thread.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Form_SPL.formMonitor">
            <summary>
            Static variable which stores an object used for thread safe access to a single form.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Form_SPL.ifConditionTrueCommands">
            <summary>
            List to store the commands inside if command block.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Form_SPL.runIfConditionTrueCommand">
            <summary>
            Array to store the commands to be run inside if command block.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Form_SPL.whileConditionTrueCommands">
            <summary>
            List to store the commands inside while command block.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Form_SPL.runWhileConditionTrueCommand">
            <summary>
            Array to store the commands to be run inside while command block.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Form_SPL.methodCommands">
            <summary>
            List to store the commands inside method command block.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Form_SPL.runMethodCommands">
            <summary>
            Array to store the commands to be run inside while command block.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.#ctor">
            <summary>
            Empty Constructor to initialize on instance of the Form_SPL class.
            Creates graphic object of drawing on the panel and sets the syntaxChecked to false each time the class is initialized.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.Pnl_Paint_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Panel paint event listener to draw and persist the drawing in the panel.
            </summary>
            <param name="sender">The object that triggered the event of syntax button being clicked.</param>
            <param name="e">The arguments of the syntax button click event.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.SplitCommand(System.String)">
            <summary>
            Method to split the string command and return it in an array.
            </summary>
            <param name="command">The command in string.</param>
            <returns>Splits the string and returns it in an array.</returns>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.Btn_Syntax_Click(System.Object,System.EventArgs)">
            <summary>
            Syntax button click event handler to check the event of syntax button being clicked.
            When button is clicked it checks which textbox has input and according to it validates the command name and parameters.
            Calls ValidateCommandName() and ValidateParameters() from CommandParser to validate the command name and parameters once the button is clicked.
            </summary>
            <param name="sender">The object that triggered the event of syntax button being clicked.</param>
            <param name="e">The arguments of the syntax button click event.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.Btn_Run_Click(System.Object,System.EventArgs)">
            <summary>
            Run button click event handler to run the commands when the run button is clicked. 
            Run button event handler only runs the command if the syntax button is clicked and also
            if the command name and parameters are valid. 
            Run button works if command is written in single or multi-line textbox. 
            </summary>
            <param name="sender">The object that triggered the event of run button being clicked.</param>
            <param name="e">The arguments of the run button click event.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.ExitToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the event of exit menu option being clicked.
            </summary>
            <param name="sender">The object that triggered the event of exit menu option being clicked.</param>
            <param name="e">The arguments of the exit menu option click event.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.NewToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the event of new menu option being clicked.
            </summary>
            <param name="sender">The object that triggered the event of new menu option being clicked.</param>
            <param name="e">The arguments of the new menu option click event.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.SaveToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the event of save menu option being clicked.
            </summary>
            <param name="sender">The object that triggered the event of save menu option being clicked.</param>
            <param name="e">The arguments of the save menu option click event.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.LoadToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the event of load menu option being clicked.
            </summary>
            <param name="sender">The object that triggered the event of load menu option being clicked.</param>
            <param name="e">The arguments of the load menu option click event.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.AboutToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the event of about menu option being clicked.
            </summary>
            <param name="sender">The object that triggered the event of about menu option being clicked.</param>
            <param name="e">The arguments of the about menu option click event.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.DuplicateProgramToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the event of about duplicateProgram option being clicked.
            </summary>
            <param name="sender">The object that triggered the event of duplicateProgram menu option being clicked.</param>
            <param name="e">The arguments of the duplicateProgram menu option click event.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.InitializeSecondWindow">
            <summary>
            Void method to create a new Form_SPL or main form.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.UpdateDrawing(Graphical_Programming_Language.Shape)">
            <summary>
            Void method to update the drawing on the form according to the thread.
            </summary>
            <param name="shape">Instance of shape class which is used to draw on the form.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.Form_SPL_FormClosed(System.Object,System.Windows.Forms.FormClosedEventArgs)">
            <summary>
            Event handler for the event of form being closed.
            </summary>
            <param name="sender">The object that triggered the event of form being closed.</param>
            <param name="e">The arguments of the form closed event.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.Btn_PenColour_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the event of pen colour button being clicked.
            </summary>
            <param name="sender">The object that triggered the event of pen colour button being clicked.</param>
            <param name="e">The arguments of the pen colour button being clicked.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.Btn_CanvasColour_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the event of the canvas colour button being clicked.
            </summary>
            <param name="sender">The object that triggered the event of canvas colour button being clicked.</param>
            <param name="e">The arguments of the form closed event.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.XValue_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the event of X-Axis value being changed.
            </summary>
            <param name="sender">The object that triggered the event of X-Axis value being changed.</param>
            <param name="e">The arguments of the form closed event.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.YValue_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the event of Y-Axis value being changed.
            </summary>
            <param name="sender">The object that triggered the event of Y-Axis value being changed.</param>
            <param name="e">The arguments of the form closed event.</param>
        </member>
        <member name="F:Graphical_Programming_Language.Form_SPL.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Form_SPL.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Graphical_Programming_Language.IMessageDisplayer">
            <summary>
            An interface for displaying error message of commands.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.IMessageDisplayer.DisplayMessage(System.String)">
            <summary>
            Abstract void method to store the error messages of commands passed by implemented classes.
            </summary>
            <param name="message">The error message to be displayed.</param>
        </member>
        <member name="T:Graphical_Programming_Language.InvalidParameterException">
            <summary>
            Invalid Parameter Exception class to catch invalid parameter being provided to the command.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.InvalidParameterException.#ctor(System.String)">
            <summary>
            Intializes an instance of Invalid Parameter Exception class and sets the error message to the base class.
            </summary>
            <param name="message">Sets the error message.</param>
        </member>
        <member name="T:Graphical_Programming_Language.Line">
            <summary>
            Derived class Line which inherits abstract class Shape to represent a straight line being drawn on graphics.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Line.endingPointX">
            <summary>
            Variable to store the X-coodinate of ending point of the line.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Line.endingPointY">
            <summary>
            Variable to store the Y-coodinate of ending point of the line.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.Line.#ctor(System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Single,System.Int32,System.Int32)">
            <summary>
            Parameterized constructor line which initializes an instance of the class Line with specified parameters. 
            The color, fill, x and y parameters are passed to base class Shape constructor.
            </summary>
            <param name="colour">Colour of the line.</param>
            <param name="fill">Fill not used but inherited from abstract class shape.</param>
            <param name="x">X coordinate from where the line will be drawn.</param>
            <param name="y">Y coordinate from where the line will be drawn.</param>
            <param name="rotationAngle">Angle for line to be rotated.</param>
            <param name="endingPointX">X-coodinate of ending point of the line.</param>
            <param name="endingPointY">Y-coodinate of ending point of the line.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Line.Draw(System.Drawing.Graphics)">
            <summary>
            Abstract method draw inherited from base class to be overriden in derived class Line to draw a line on the graphics.
            </summary>
            <param name="g">Graphics object on which the line will be drawn.</param>
        </member>
        <member name="T:Graphical_Programming_Language.MultipleParametersException">
            <summary>
            Multiple Parameters Exception class to catch the exception of not enough parameter being provided to the command.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.MultipleParametersException.#ctor(System.String)">
            <summary>
            Intializes an instance of Multiple Parameters Exception class and sets the error message to the base class.
            </summary>
            <param name="message">Sets the error message.</param>
        </member>
        <member name="T:Graphical_Programming_Language.NegativeParametersException">
            <summary>
            Negative Parameters Exception class to catch negative parameters being provided to the command.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.NegativeParametersException.#ctor(System.String)">
            <summary>
            Intializes an instance of Negative Parameters Exception class and sets the error message to the base class.
            </summary>
            <param name="message">Sets the error message.</param>
        </member>
        <member name="T:Graphical_Programming_Language.Program">
            <summary>
            The main entry point class for the graphical programming language application.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:Graphical_Programming_Language.Rectangle">
            <summary>
            Derived class Rectangle which inherits abstract class Shape to represent rectangle shape being drawn on graphics.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Rectangle.width">
            <summary>
            Variable to store the length of the rectangle.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Rectangle.height">
            <summary>
            Variable to store the breadth of the rectangle.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.Rectangle.#ctor(System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Single,System.Int32,System.Int32)">
            <summary>
            Parameterized constructor Rectangle which initializes an instance of the class Rectangle with specified parameters. 
            The color, fill, x and y parameters are passed to base class Shape constructor.
            </summary>
            <param name="colour">Colour of the rectangle.</param>
            <param name="fill">For rectangle to be filled or not.</param>
            <param name="x">X coordinate from where the rectangle will be drawn.</param>
            <param name="y">Y coordinate from where the rectangle will be drawn.</param>
            <param name="rotationAngle">Angle for rectangle to be rotated.</param>
            <param name="width">Width for the length of the rectangle.</param>
            <param name="height">Height for the breadth of the rectangle.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Rectangle.Draw(System.Drawing.Graphics)">
            <summary>
            Abstract method draw inherited from base class to be overriden in derived class Rectangle to draw rectangle on the graphics.
            </summary>
            <param name="g">Graphics object on which the rectangle will be drawn.</param>
        </member>
        <member name="T:Graphical_Programming_Language.RemoveParametersException">
            <summary>
            Remove Parameters Exception class to catch parameters being provided to the command where parameters is not required.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.RemoveParametersException.#ctor(System.String)">
            <summary>
            Intializes an instance of Remove Parameters Exception class and sets the error message to the base class.
            </summary>
            <param name="message">Sets the error message.</param>
        </member>
        <member name="T:Graphical_Programming_Language.Shape">
            <summary>
            Abstract class that represents shape that can be drawn on a graphics surface.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Shape.colour">
            <summary>
            Colour variable to store the shape's color.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Shape.x">
            <summary>
            X coordinate from where the shape will be drawn.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Shape.y">
            <summary>
            Y coordinate from where the shape will be drawn.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Shape.fill">
            <summary>
            Fill variable which sets if the shape will be drawn filled or without fill.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Shape.rotationAngle">
            <summary>
            RotationAngle variable to store the angle of shape being rotated.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Shape.penSize">
            <summary>
            PenSize variable to store the current pen size of the shape.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.Shape.#ctor(System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Single)">
            <summary>
            Parameterized constructor for the class which initializes an instance of the class with specified parameters.
            </summary>
            <param name="colour">Color of the shape. </param>
            <param name="fill">For shape to be filled or not. </param>
            <param name="x">X-coordinate for the shape.</param>
            <param name="y">Y-coordinate for the shape.</param>
            <param name="rotationAngle">Angle for shape to be rotated.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Shape.Draw(System.Drawing.Graphics)">
            <summary>
            Abstract method draw to be overriden by derived classes to be drawn on graphics according to the shape of the derived class.
            </summary>
            <param name="g">Graphics object on which the shape will be drawn.</param>
        </member>
        <member name="P:Graphical_Programming_Language.Shape.PenSize">
            <summary>
            Getter and setter method to set or get the pen size value.
            </summary>
        </member>
        <member name="T:Graphical_Programming_Language.ShapeFactory">
            <summary>
            Shape factory class for creating instances of Shape class according to the shape name.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.ShapeFactory.ShapeType(System.String,System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Single,System.Collections.Generic.List{System.Int32})">
            <summary>
            Shape method which creates instance of a Shape according to the shape name.
            </summary>
            <param name="shape">Type of shape to be created.</param>
            <param name="color">Color of shape.</param>
            <param name="fill">For shape to be filled or not.</param>
            <param name="xPos">X coordinate from where the shape will be drawn.</param>
            <param name="yPos">Y coordinate from where the shape will be drawn.</param>
            <param name="rotationAngle">Angle for shape to be rotated.</param>
            <param name="commandValues">List of integer values of the shape.</param>
            <returns>Returns the instance of shape.</returns>
        </member>
        <member name="T:Graphical_Programming_Language.SingleParameterException">
            <summary>
            Single Parameters Exception class to catch the error of command where a single parameter is required.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.SingleParameterException.#ctor(System.String)">
            <summary>
            Intializes an instance of Single Parameter Exception class and sets the error message to the base class.
            </summary>
            <param name="message">Sets the error message.</param>
        </member>
        <member name="T:Graphical_Programming_Language.Star">
            <summary>
            Derived class Star which inherits abstract class Shape to represent star shape being drawn on graphics.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Star.size">
            <summary>
            Variable to store the size of the star.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.Star.#ctor(System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Single,System.Int32)">
            <summary>
            Parameterized constructor Star which initializes an instance of the class Star with specified parameters. 
            The color, fill, x and y parameters are passed to base class Shape constructor.
            </summary>
            <param name="colour">Colour of the star.</param>
            <param name="fill">For star to be filled or not.</param>
            <param name="x">X coordinate from where the star will be drawn.</param>
            <param name="y">Y coordinate from where the star will be drawn.</param>
            <param name="rotationAngle">Angle for star to be rotated.</param>
            <param name="size">Angle for star to be rotated.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Star.Draw(System.Drawing.Graphics)">
            <summary>
            Abstract method draw inherited from base class to be overriden in derived class Star to draw star on the graphics.
            </summary>
            <param name="g">Graphics object on which the star will be drawn.</param>
        </member>
        <member name="T:Graphical_Programming_Language.Triangle">
            <summary>
            Derived class Triangle which inherits abstract class Shape to represent triangle shape being drawn on graphics.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Triangle.length">
            <summary>
            Variable to store length of the triangle.
            </summary>
        </member>
        <member name="F:Graphical_Programming_Language.Triangle.height">
            <summary>
            Variable to store the height of the triangle.
            </summary>
        </member>
        <member name="M:Graphical_Programming_Language.Triangle.#ctor(System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Single,System.Int32,System.Int32)">
            <summary>
            Parameterized constructor Triangle which initializes an instance of the class Triangle with specified parameters. 
            The color, fill, x and y parameters are passed to base class Shape constructor.
            </summary>
            <param name="colour">Color of the triangle.</param>
            <param name="fill">For triangle to be filled or not.</param>
            <param name="x">X coordinate from where the triangle will be drawn.</param>
            <param name="y">Y coordinate from where the triangle will be drawn.</param>
            <param name="rotationAngle">Angle for triangle to be rotated.</param>
            <param name="length">Length for the length of the triangle.</param>
            <param name="height">Height for the height of the triangle.</param>
        </member>
        <member name="M:Graphical_Programming_Language.Triangle.Draw(System.Drawing.Graphics)">
            <summary>
            Abstract method draw inherited from base class to be overriden in derived class Triangle to draw triangle on the graphics.
            </summary>
            <param name="g">Graphics object on which the triangle will be drawn.</param>
        </member>
        <member name="T:Graphical_Programming_Language.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Graphical_Programming_Language.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Graphical_Programming_Language.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
